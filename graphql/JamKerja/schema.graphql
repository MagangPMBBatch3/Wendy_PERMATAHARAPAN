type JamKerja {
    id: ID!
    user_id: Int
    tanggal: Date
    jam_masuk: Time
    jam_pulang: Time
    created_at: DateTime
    updated_at: DateTime
    deleted_at: DateTime
}

input CreateJamKerjaInput {
    user_id: Int
    tanggal: Date
    jam_masuk: Time
    jam_pulang: Time
}

input UpdateJamKerjaInput {
    id: ID!
    user_id: Int
    tanggal: Date
    jam_masuk: Time
    jam_pulang: Time
}

extend type Query {
    getJamKerja(search: String): [JamKerja!]!
    @field(resolver: "App\\GraphQL\\JamKerja\\Queries\\JamKerjaQuery@getJamKerja")

    allJamKerja: [JamKerja!]!
    @field(resolver: "App\\GraphQL\\JamKerja\\Queries\\JamKerjaQuery@allJamKerja")

    jamKerja(id: ID! @eq(key: "id")): JamKerja
    @find(model: "App\\Models\\JamKerja\\JamKerja")
}

extend type Mutation {
    createJamKerja(input: CreateJamKerjaInput! @spread): JamKerja
    @field(resolver: "App\\GraphQL\\JamKerja\\Mutations\\JamKerjaMutation@create")

    updateJamKerja(input: UpdateJamKerjaInput! @spread): JamKerja
    @field(resolver: "App\\GraphQL\\JamKerja\\Mutations\\JamKerjaMutation@update")

    deleteJamKerja(id: ID! @eq(key: "id")): JamKerja
    @delete(model: "App\\Models\\JamKerja\\JamKerja")

    restoreJamKerja(id: ID! @eq(key: "id")): JamKerja
    @field(resolver: "App\\GraphQL\\JamKerja\\Mutations\\JamKerjaMutation@restore")

    forceDeleteJamKerja(id: ID!): JamKerja
    @field(resolver: "App\\GraphQL\\JamKerja\\Mutations\\JamKerjaMutation@forceDelete")
}
